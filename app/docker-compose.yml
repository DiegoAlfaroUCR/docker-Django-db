services:
  db:
    image: postgres:17
    environment:
      # Se usan las variables definidas en .env
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env

    # Healthcheck, pone condición "healthy" si base de datos está lista
    # Se repite varias veces hasta que se encuentre lista.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME} -h localhost -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  django-web:
    build: .      # Usar imagen del Dockerfile
    container_name: django-docker
    volumes:      # Mapea los cambios hechos en el código al contenedor
      - .:/app
    working_dir: /app
    ports:
      - "8000:8000"
    depends_on:   # Espera a crear el contenedor del db antes de hacer el de django.
      db:
        condition: service_healthy
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
    env_file:
      - .env

volumes:
  postgres_data:
